{"version":3,"sources":["logo.gif","Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","keywords","text","getSuggestions","value","inputValue","trim","toLowerCase","suggestions","length","filter","kw","includes","sort","a","b","getSuggestionValue","suggestion","concat","renderSuggestion","_ref","query","suggestionText","matches","AutosuggestHighlightMatch","parts","AutosuggestHighlightParse","react_default","createElement","className","map","part","index","highlight","key","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","_ref2","newValue","method","setState","onSuggestionSelected","_ref3","suggestionValue","suggestionIndex","sectionIndex","console","log","onSuggestionsFetchRequested","_ref4","onSuggestionsClearRequested","state","_this$state","inputProps","placeholder","dist_default","Component","App","src","logo","alt","src_Form_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+SCSlCC,eAAW,CACf,CACEC,KAAM,YAER,CACEA,KAAM,WAIJC,EAAiB,SAAAC,GACrB,IAAMC,EAAaD,EAAME,OAAOC,cAG5BC,EAA8B,IAFdH,EAAWI,OAEO,GAAKR,EAASS,OAAO,SAAAC,GAAE,OAC3DA,EAAGT,KAAKK,cAAcK,SAASP,KAIjC,OAHAG,EAAYK,KAAK,SAASC,EAAEC,GAC3B,OAAOD,EAAEZ,KAAKO,OAASM,EAAEb,KAAKO,SAExBD,GAIT,SAASQ,EAAmBC,GAC1B,SAAAC,OAAUD,EAAWf,MAGvB,SAASiB,EAAiBF,EAA1BG,GAAiD,IAATC,EAASD,EAATC,MAChCC,EAAc,GAAAJ,OAAMD,EAAWf,MAC/BqB,EAAUC,IAA0BF,EAAgBD,GACpDI,EAAQC,IAA0BJ,EAAgBC,GAExD,OACEI,EAAAb,EAAAc,cAAA,QAAMC,UAAW,sBACfF,EAAAb,EAAAc,cAAA,QAAMC,UAAU,QAEZJ,EAAMK,IAAI,SAACC,EAAMC,GACf,IAAMH,EAAYE,EAAKE,UAAY,YAAc,KAEjD,OACEN,EAAAb,EAAAc,cAAA,QAAMC,UAAWA,EAAWK,IAAKF,GAAQD,EAAK7B,cA4E7CiC,cAlEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAoBFI,SAAW,SAACC,EAADC,GAAiC,IAAvBC,EAAuBD,EAAvBC,SAAuBD,EAAbE,OAE7BX,EAAKY,SAAS,CACZ5C,MAAO0C,KAxBGV,EA4Bda,qBAAuB,SAACL,EAADM,GAAmFA,EAAzEjC,WAAyE,IAA7DkC,EAA6DD,EAA7DC,gBAA6DD,EAA5CE,gBAA4CF,EAA3BG,aAA2BH,EAAbH,OAC5FO,QAAQC,IAAIJ,IA7BCf,EAiCdoB,4BAA8B,SAAAC,GAAe,IAAZrD,EAAYqD,EAAZrD,MAC/BgC,EAAKY,SAAS,CACZxC,YAAaL,EAAeC,MAnClBgC,EAuCdsB,4BAA8B,WAC5BtB,EAAKY,SAAS,CACZxC,YAAa,MAtCf4B,EAAKuB,MAAQ,CACXvD,MAAO,GACPI,YAAa,GACbP,SAAU,IANAmC,wEA6CL,IAAAwB,EACwBrB,KAAKoB,MAA5BvD,EADDwD,EACCxD,MAAOI,EADRoD,EACQpD,YACTqD,EAAa,CACjBC,YAAa,iBACb1D,QACAuC,SAAUJ,KAAKI,UAGjB,OACEhB,EAAAb,EAAAc,cAACmC,EAAAjD,EAAD,CACEN,YAAaA,EACbgD,4BAA6BjB,KAAKiB,4BAClCP,qBAAsBV,KAAKU,qBAC3BS,4BAA6BnB,KAAKmB,4BAClC1C,mBAAoBA,EACpBG,iBAAkBA,EAClB0C,WAAYA,WA9DDG,8BCrCJC,0LAZX,OAEEtC,EAAAb,EAAAc,cAAA,OAAKC,UAAU,OACbF,EAAAb,EAAAc,cAAA,OAAKsC,IAAKC,IAAMtC,UAAU,WAAWuC,IAAI,SACzCzC,EAAAb,EAAAc,cAACyC,EAAD,cAPUL,cCOEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAb,EAAAc,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d8c3f8e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a52c9fc0.gif\";","import Autosuggest from 'react-autosuggest';\nimport AutosuggestHighlightMatch from 'autosuggest-highlight/match';\nimport AutosuggestHighlightParse from 'autosuggest-highlight/parse';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './Form.css';\n/** Tutorial: http://react-autosuggest.js.org/ **/\n\n// Janice's TODO add: 1. \"add\", 2. \"delete from list\", 4. prettify (center), 5. store keywords somehow\nconst keywords = [\n  {\n    text: 'Car 1111'\n  },\n  {\n    text: '2 car'\n  }\n];\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  var suggestions = inputLength === 0 ? [] : keywords.filter(kw =>\n    kw.text.toLowerCase().includes(inputValue))\n  suggestions.sort(function(a,b){\n  \treturn a.text.length - b.text.length;\n  });\n  return suggestions\n  \n};\n\nfunction getSuggestionValue(suggestion) {\n  return `${suggestion.text}`;\n}\n\nfunction renderSuggestion(suggestion, { query }) {\n  const suggestionText = `${suggestion.text}`;\n  const matches = AutosuggestHighlightMatch(suggestionText, query);\n  const parts = AutosuggestHighlightParse(suggestionText, matches);\n\n  return (\n    <span className={'suggestion-content'}>\n      <span className=\"name\">\n        {\n          parts.map((part, index) => {\n            const className = part.highlight ? 'highlight' : null;\n\n            return (\n              <span className={className} key={index}>{part.text}</span>\n            );\n          })\n        }\n      </span>\n    </span>\n  );\n}\n\nclass Form extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      suggestions: [],\n      keywords: []\n    };\n\n  }\n  \n  // componentDidMount() {\n  //   axios.get('keywords')\n\t //  .then(function (response) { // TODO see API and test\n\t //    this.setState({keywords:response})\n\t //  })\n\t //  .catch(function (error) {\n\t //    console.log(error);\n\t //  });\n  // }\n\n  onChange = (event, { newValue, method }) => {\n\n    this.setState({\n      value: newValue\n    });\n  };\n\n  onSuggestionSelected = (event, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) => {\n  \tconsole.log(suggestionValue)\n  \t// TODO add here\n  };\n  \n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: \"Enter keywords\",\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n      <Autosuggest \n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionSelected={this.onSuggestionSelected}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps} />\n    );\n  }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport Form from './Form';\nimport logo from './logo.gif';\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Form/>\n\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}